final = fusion(lst_futures)
str(final)
# Mettre en facteur notre variable qualitative nominal
final$Futures <- as.factor(final$Futures)
levels(final$Futures)
saveRDS(final, file = "fichier_de_travail.rds")
library(zoo)
library(dplyr)
library(ggplot2)
colnames(final)
series_futures <- final %>%
group_by(Futures) %>%
group_modify(~ {
# Créer l'objet zoo
zoo_object <- zoo(.x$Lowest_Cotation, order.by = .x$Date)
# Retourner les données sous forme de data frame
data.frame(Date = index(zoo_object), Value = coredata(zoo_object))
})
# Visualiser les séries par "Futures"
head(series_futures)
# Tracer avec ggplot2
ggplot(series_futures, aes(x = Date, y = Value, color = Futures)) +
geom_line() +
labs(title = "Série Chronologique par Futures", x = "Date", y = "Value")
D5_F = D5 %>%
fusion() %>%
virgule(2) %>%
nom_format() %>%
ajout_col("sucre")
# Création d'une liste de dataframe avec les df finaux
lst_futures = list(D2_F,D3_F,D4_F,D5_F)
# Fusion des df finaux pour en avoir que 1
final = fusion(lst_futures)
str(final)
# Mettre en facteur notre variable qualitative nominal
final$Futures <- as.factor(final$Futures)
levels(final$Futures)
saveRDS(final, file = "fichier_de_travail.rds")
library(zoo)
library(dplyr)
library(ggplot2)
colnames(final)
series_futures <- final %>%
group_by(Futures) %>%
group_modify(~ {
# Créer l'objet zoo
zoo_object <- zoo(.x$Lowest_Cotation, order.by = .x$Date)
# Retourner les données sous forme de data frame
data.frame(Date = index(zoo_object), Value = coredata(zoo_object))
})
# Visualiser les séries par "Futures"
head(series_futures)
# Tracer avec ggplot2
ggplot(series_futures, aes(x = Date, y = Value, color = Futures)) +
geom_line() +
labs(title = "Série Chronologique par Futures", x = "Date", y = "Value")
# importation des jeux de données
D1 = extract_tables("../Data/Futures cacao US - Données Historiques.pdf",col_names = FALSE)
D1[[1]]
D1_F = D1 %>%
fusion() %>%
nom_format() %>%
ajout_col("cacao")
D1_F
# Création d'une liste de dataframe avec les df finaux
lst_futures = list(D1_F,D2_F,D3_F,D4_F,D5_F)
# Fusion des df finaux pour en avoir que 1
final = fusion(lst_futures)
# Création d'une liste de dataframe avec les df finaux
lst_futures = list(D1_F)
# Fusion des df finaux pour en avoir que 1
final = fusion(lst_futures)
str(final)
# Mettre en facteur notre variable qualitative nominal
final$Futures <- as.factor(final$Futures)
levels(final$Futures)
saveRDS(final, file = "fichier_de_travail.rds")
library(zoo)
library(dplyr)
library(ggplot2)
colnames(final)
series_futures <- final %>%
group_by(Futures) %>%
group_modify(~ {
# Créer l'objet zoo
zoo_object <- zoo(.x$Lowest_Cotation, order.by = .x$Date)
# Retourner les données sous forme de data frame
data.frame(Date = index(zoo_object), Value = coredata(zoo_object))
})
# Visualiser les séries par "Futures"
head(series_futures)
# Tracer avec ggplot2
ggplot(series_futures, aes(x = Date, y = Value, color = Futures)) +
geom_line() +
labs(title = "Série Chronologique par Futures", x = "Date", y = "Value")
D1_F[[2]]
D1[[1]]
D1_F[[1]]
D1[[1]]
D1[[2]]
D1[[1]]
D1[[2]]
View(D1[[2]] )
D1_F = D1 %>%
retrait() %>%
fusion() %>%
nom_format() %>%
ajout_col("cacao")
D1_F = D1 %>%
fusion() %>%
retrait() %>%
nom_format() %>%
ajout_col("cacao")
D1_F
View(D1_F )
D1[[1]]
################################################################################
D1[[2]] <- D1[[1]][-1, ] %>%
retrait() %>%
virgule(2)
D1[[2]]
D1[[3]]
D1_F
D1_F = D1 %>%
fusion() %>%
retrait() %>%
virgule(2) %>%
nom_format() %>%
ajout_col("cacao")
D1_F
View(D1_F )
D1[[1]]
D1[[1]][, c("X2", "X3", "X4", "X5")] <- lapply(D1[[1]][, c("X2", "X3", "X4", "X5")], function(x) as.numeric(x) / 1000)
D1[[2]][, c("X2", "X3", "X4", "X5")] <- lapply(D1[[2]][, c("X2", "X3", "X4", "X5")], function(x) as.numeric(x) / 1000)
D1_F = D1 %>%
fusion() %>%
retrait() %>%
nom_format() %>%
ajout_col("cacao")
D1_F
View(D1_F)
D1[[1]]
D1[[2]]
D1[[3]]
D1[[4]][, c("X2", "X3", "X4", "X5")] <- lapply(D1[[2]][, c("X2", "X3", "X4", "X5")], function(x) as.numeric(x) / 1000)
D1[[4]]
D1[[8]]
View(D1[[1]])
View(D1[[6]])
View(D1[[1]])
View(D1_F)
D1[[1]] = D1[[1]] %>%
retrait()
D1[[1]]
D1[[1]][, c("X2", "X3", "X4", "X5")] <- lapply(D1[[1]][, c("X2", "X3", "X4", "X5")], function(x) as.numeric(x) / 1000)
D1[[1]]
D1[[1]]
D1[[2]]
D1[[3]]
D1[[4]]
D1[[5]]
D1[[6]]
D1[[7]]
# importation des jeux de données
D1 = extract_tables("../Data/Futures cacao US - Données Historiques.pdf",col_names = FALSE)
D1[[1]]
D1[[2]]
D1[[1]]
################################################################################
D1[[1]] <- D1[[1]][-1, ]
D1[[1]]
D1[[1]]
D1[[2]]
D1[[3]]
D1[[4]]
D1[[5]]
D1[[6]]
D1[[7]]
D1[[1]]
View(D1[[1]])
View(D1[[2]])
D1[[2]]
D1[[1]]
D1[[7]]
str(D1[[7]] )
D1[[-1]]
################################################################################
#D1[[1]] <- D1[[1]][-1, ]
length(D11)
################################################################################
#D1[[1]] <- D1[[1]][-1, ]
length(D1)
for i in range(72){
for (i in range(72)){
D1[[i]]
}
for (i in 1:72) {
D1[[i]]
}
for (i in 1:72) {
print(D1[[i]])
}
View(D1[[2]])
for (i in 1:4) {
print(D1[[i]])
}
for (i in 1:2) {
print(D1[[i]])
}
test = D1[[1]] %>%
retrait() %>%
virgule(5)
test
View(test)
test = D1[[1]] %>%
#retrait() %>%
virgule(5)
test
D1[[1]]
retrait_vir
retrait_vir <- function(data) {
obj <- data %>%
mutate(across(c(X2, X3, X4, X5), ~ gsub(",", "", .))) # Retire uniquement les virgules
return(obj)
}
# --------------------------  retrai_vir()                ----------------------- #
# retrai_vir permet de retirer lesle virgules
retrait_vir <- function(data) {
obj <- data %>%
mutate(across(c(X2, X3, X4, X5), ~ gsub(",", "", .))) # Retire uniquement les virgules
return(obj)
}
test = D1[[1]] %>%
retrait_vir()
test
test = D1[[1]] %>%
retrait_vir() %>%
mutate(across(c(X2, X3, X4, X5), as.numeric))
test
View(test)
View(D1[[1]])
test = D1[[1]] %>%
retrait_vir() %>%
mutate(across(c(X2, X3, X4, X5), as.numeric))
D1[[1]] = D1[[1]] %>%
retrait_vir() %>%
mutate(across(c(X2, X3, X4, X5), as.numeric))
View(D1[[1]])
D1_F = D1 %>%
fusion() %>%
retrait() %>%
virgule(2) %>%
nom_format() %>%
ajout_col("cacao")
View(D1_F)
D1_F = D1 %>%
fusion() %>%
retrait() %>%
nom_format() %>%
ajout_col("cacao")
D1_F
View(D1_F)
# importation des jeux de données
D1 = extract_tables("../Data/Futures cacao US - Données Historiques.pdf",col_names = FALSE)
test = D1[[1]] %>%
retrait_vir()
test
test = D1[[1]] %>%
retrait() %>%
%>%
test = D1[[1]] %>%
retrait()
test
test = D1[[1]] %>%
retrait() %>%
virgule(2)
test
################################################################################
D1[[1]] <- D1[[1]][-1, ]
test = D1[[1]] %>%
retrait() %>%
virgule(2)
test
D1[[1]] = D1[[1]] %>%
retrait() %>%
virgule(2)
D1[[1]] = D1[[1]] %>%
retrait() %>%
mutate(across(c(X2, X3, X4, X5), as.numeric))
D1[[1]]
D1[[1]] = D1[[1]] %>%
retrait() %>%
virgule(2) %>%
mutate(across(c(X2, X3, X4, X5), as.numeric))
D1[[1]]
View(D1[[1]])
View(D1[[2]])
View(D1[[1]])
test = D1[[1]] %>%
retrait() %>%
virgule(2)
test
test
# importation des jeux de données
D1 = extract_tables("../Data/Futures cacao US - Données Historiques.pdf",col_names = FALSE)
test = D1[[1]] %>%
retrait() %>%
virgule(2)
test
################################################################################
D1[[1]] <- D1[[1]][-1, ]
test = D1[[1]] %>%
retrait() %>%
virgule(4)
test = D1[[1]] %>%
retrait() %>%
virgule(5)
test
View(test)
test = D1[[1]] %>%
retrait()
test
test <- D1[[1]] %>%
retrait() %>% # Applique la fonction retrait pour nettoyer les colonnes
mutate(across(c(X2, X3, X4, X5), ~ as.numeric(.) / 1000))
test
test <- D1[[1]] %>%
retrait() %>% # Applique la fonction retrait pour nettoyer les colonnes
mutate(across(c(X2, X3, X4, X5), ~ as.numeric(.) / 100000))
test
View(test)
D1[[1]] <- D1[[1]] %>%
retrait() %>% # Applique la fonction retrait pour nettoyer les colonnes
mutate(across(c(X2, X3, X4, X5), ~ as.numeric(.) / 100000))
D1_F = D1 %>%
fusion() %>%
retrait() %>%
nom_format() %>%
ajout_col("cacao")
View(D1_F)
D1_F = D1 %>%
fusion() %>%
nom_format() %>%
ajout_col("cacao")
D1_F
View(D1_F)
D1_F = D1 %>%
fusion() %>%
mutate(across(c(X2, X3, X4, X5), ~ as.numeric(.) *1000)) %>%
nom_format() %>%
ajout_col("cacao")
D1_F
View(D1_F)
D1_F = D1 %>%
fusion() %>%
mutate(across(c(X2, X3, X4, X5), ~ as.numeric(.) *1000)) %>%
nom_format() %>%
ajout_col("cacao")
# Création d'une liste de dataframe avec les df finaux
lst_futures = list(D1_F)
# Fusion des df finaux pour en avoir que 1
final = fusion(lst_futures)
str(final)
# Mettre en facteur notre variable qualitative nominal
final$Futures <- as.factor(final$Futures)
levels(final$Futures)
saveRDS(final, file = "fichier_de_travail.rds")
library(zoo)
library(dplyr)
library(ggplot2)
colnames(final)
series_futures <- final %>%
group_by(Futures) %>%
group_modify(~ {
# Créer l'objet zoo
zoo_object <- zoo(.x$Lowest_Cotation, order.by = .x$Date)
# Retourner les données sous forme de data frame
data.frame(Date = index(zoo_object), Value = coredata(zoo_object))
})
# Visualiser les séries par "Futures"
head(series_futures)
# Tracer avec ggplot2
ggplot(series_futures, aes(x = Date, y = Value, color = Futures)) +
geom_line() +
labs(title = "Série Chronologique par Futures", x = "Date", y = "Value")
colnames(final)
# Créer l'objet zoo
zoo_object <- zoo(.x$Closed_Cotation, order.by = .x$Date)
# Retourner les données sous forme de data frame
data.frame(Date = index(zoo_object), Value = coredata(zoo_object))
series_futures <- final %>%
group_by(Futures) %>%
group_modify(~ {
# Créer l'objet zoo
zoo_object <- zoo(.x$Closed_Cotation, order.by = .x$Date)
# Retourner les données sous forme de data frame
data.frame(Date = index(zoo_object), Value = coredata(zoo_object))
})
# Visualiser les séries par "Futures"
head(series_futures)
# Tracer avec ggplot2
ggplot(series_futures, aes(x = Date, y = Value, color = Futures)) +
geom_line() +
labs(title = "Série Chronologique par Futures", x = "Date", y = "Value")
# Tracer avec ggplot2
ggplot(series_futures, aes(x = Date, y = Value, color = Futures)) +
geom_line() +
labs(title = "Série Chronologique par Futures", x = "Date", y = "Value")
# Tracer avec ggplot2
ggplot(series_futures, aes(x = Date, y = Value, color = Futures)) +
geom_line() +
labs(title = "Série Chronologique par Futures", x = "Date", y = "Value")
# Créer l'objet zoo
zoo_object <- zoo(.x$Highest_Cotation, order.by = .x$Date)
series_futures <- final %>%
group_by(Futures) %>%
group_modify(~ {
# Créer l'objet zoo
zoo_object <- zoo(.x$Closed_Cotation, order.by = .x$Date)
# Retourner les données sous forme de data frame
data.frame(Date = index(zoo_object), Value = coredata(zoo_object))
})
series_futures <- final %>%
group_by(Futures) %>%
group_modify(~ {
# Créer l'objet zoo
zoo_object <- zoo(.x$Highest_Cotation, order.by = .x$Date)
# Retourner les données sous forme de data frame
data.frame(Date = index(zoo_object), Value = coredata(zoo_object))
})
colnames(final)
series_futures <- final %>%
group_by(Futures) %>%
group_modify(~ {
# Créer l'objet zoo
zoo_object <- zoo(.x$Lowest_Cotation, order.by = .x$Date)
# Retourner les données sous forme de data frame
data.frame(Date = index(zoo_object), Value = coredata(zoo_object))
})
# Visualiser les séries par "Futures"
head(series_futures)
# Tracer avec ggplot2
ggplot(series_futures, aes(x = Date, y = Value, color = Futures)) +
geom_line() +
labs(title = "Série Chronologique par Futures", x = "Date", y = "Value")
D4_F = D4 %>%
fusion() %>%
retrait() %>%
virgule(3) %>%
nom_format() %>%
ajout_col("pétrole Brent")
D4_F = D4 %>%
colle() %>%
fusion() %>%
post_colle() %>%
retrait() %>%
virgule(3) %>%
nom_format() %>%
ajout_col("pétrole Brent")
# Création d'une liste de dataframe avec les df finaux
lst_futures = list(D4_F)
# Fusion des df finaux pour en avoir que 1
final = fusion(lst_futures)
str(final)
# Mettre en facteur notre variable qualitative nominal
final$Futures <- as.factor(final$Futures)
levels(final$Futures)
saveRDS(final, file = "fichier_de_travail.rds")
library(zoo)
library(dplyr)
library(ggplot2)
colnames(final)
series_futures <- final %>%
group_by(Futures) %>%
group_modify(~ {
# Créer l'objet zoo
zoo_object <- zoo(.x$Lowest_Cotation, order.by = .x$Date)
# Retourner les données sous forme de data frame
data.frame(Date = index(zoo_object), Value = coredata(zoo_object))
})
# Visualiser les séries par "Futures"
head(series_futures)
# Tracer avec ggplot2
ggplot(series_futures, aes(x = Date, y = Value, color = Futures)) +
geom_line() +
labs(title = "Série Chronologique par Futures", x = "Date", y = "Value")
D4
D4_F = D4 %>%
colle() %>%
fusion()
D4_F
View(D4_F)
colnames(final)
series_futures <- final %>%
group_by(Futures) %>%
group_modify(~ {
# Créer l'objet zoo
zoo_object <- zoo(.x$Highest_Cotation, order.by = .x$Date)
# Retourner les données sous forme de data frame
data.frame(Date = index(zoo_object), Value = coredata(zoo_object))
})
# Visualiser les séries par "Futures"
head(series_futures)
# Tracer avec ggplot2
ggplot(series_futures, aes(x = Date, y = Value, color = Futures)) +
geom_line() +
labs(title = "Série Chronologique par Futures", x = "Date", y = "Value")
ggplot(series_futures, aes(x = Date, y = Value, color = Futures)) +
geom_line() +                            # Tracer la courbe
facet_grid(Futures ~ .) +                 # Créer des facettes pour chaque niveau de Futures
labs(title = "Série Chronologique des Futures", x = "Date", y = "Value") +
theme_minimal()
